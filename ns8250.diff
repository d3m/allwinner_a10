--- uart_dev_ns8250.c	2013-01-18 14:55:19.000000000 +0800
+++ uart_dev_ns8250-n.c	2013-01-30 13:54:43.000000000 +0800
@@ -37,7 +37,7 @@
 #include <dev/uart/uart_cpu.h>
 #include <dev/uart/uart_bus.h>
 
-#include <dev/ic/ns16550.h>
+#include <dev/ic/ns16550-n.h>
 
 #include "uart_if.h"
 
@@ -50,22 +50,26 @@
 static void
 ns8250_clrint(struct uart_bas *bas)
 {
-	uint8_t iir, lsr;
+	uint8_t iir;
 
 	iir = uart_getreg(bas, REG_IIR);
-	while ((iir & IIR_NOPEND) == 0) {
-		iir &= IIR_IMASK;
-		if (iir == IIR_RLS) {
-			lsr = uart_getreg(bas, REG_LSR);
-			if (lsr & (LSR_BI|LSR_FE|LSR_PE))
-				(void)uart_getreg(bas, REG_DATA);
-		} else if (iir == IIR_RXRDY || iir == IIR_RXTOUT)
-			(void)uart_getreg(bas, REG_DATA);
-		else if (iir == IIR_MLSC)
-			(void)uart_getreg(bas, REG_MSR);
-		uart_barrier(bas);
-		iir = uart_getreg(bas, REG_IIR);
-	}
+        while ((iir & IIR_NOPEND) == 0) {
+                iir &= IIR_IMASK;
+                if (iir == IIR_RLS)
+                        (void)uart_getreg(bas, REG_LSR);
+                else if (iir == IIR_RXRDY || iir == IIR_RXTOUT)
+                        (void)uart_getreg(bas, REG_DATA);
+                else if (iir == IIR_MLSC)
+                        (void)uart_getreg(bas, REG_MSR);
+                else if (iir == IIR_BUSY)
+			/*
+			 * If busy interrupt is detected 
+			 * UART status register should be read.
+			 */ 
+                        (void) uart_getreg(bas, REG_USR);
+                uart_barrier(bas);
+                iir = uart_getreg(bas, REG_IIR);
+        }
 }
 
 static int
@@ -589,27 +593,44 @@
 	ns8250 = (struct ns8250_softc *)sc;
 	bas = &sc->sc_bas;
 	uart_lock(sc->sc_hwmtx);
-	iir = uart_getreg(bas, REG_IIR);
-	if (iir & IIR_NOPEND) {
+	iir = uart_getreg(bas, REG_IIR) & IIR_IMASK;
+	if (iir == IIR_NOPEND) {
 		uart_unlock(sc->sc_hwmtx);
 		return (0);
 	}
 	ipend = 0;
-	if (iir & IIR_RXRDY) {
-		lsr = uart_getreg(bas, REG_LSR);
-		if (lsr & LSR_OE)
-			ipend |= SER_INT_OVERRUN;
-		if (lsr & LSR_BI)
-			ipend |= SER_INT_BREAK;
-		if (lsr & LSR_RXRDY)
-			ipend |= SER_INT_RXREADY;
-	} else {
-		if (iir & IIR_TXRDY) {
-			ipend |= SER_INT_TXIDLE;
-			uart_setreg(bas, REG_IER, ns8250->ier);
-		} else
-			ipend |= SER_INT_SIGCHG;
-	}
+        if (iir != IIR_NOPEND) {
+                        
+                if (iir == IIR_RLS) {
+                        lsr = uart_getreg(bas, REG_LSR);
+                        if (lsr & LSR_OE)
+                                ipend |= SER_INT_OVERRUN;
+                        if (lsr & LSR_BI)
+                                ipend |= SER_INT_BREAK;
+                        if (lsr & LSR_RXRDY)
+                                ipend |= SER_INT_RXREADY;
+
+                } else if (iir == IIR_RXRDY) {
+                        ipend |= SER_INT_RXREADY;
+
+                } else if (iir == IIR_RXTOUT) {
+                        ipend |= SER_INT_RXREADY;
+        
+                } else if (iir == IIR_TXRDY) {
+                        ipend |= SER_INT_TXIDLE;
+
+                } else if (iir == IIR_MLSC) {
+                        ipend |= SER_INT_SIGCHG;
+        
+                } else if (iir == IIR_BUSY) {
+			/*
+			 * If busy interrupt is detected 
+			 * UART status register should be read.
+			 */ 
+                        (void) uart_getreg(bas, REG_USR);
+		} 
+        }
+
 	if (ipend == 0)
 		ns8250_clrint(bas);
 	uart_unlock(sc->sc_hwmtx);
@@ -803,12 +824,18 @@
 		uart_rx_put(sc, xc);
 		lsr = uart_getreg(bas, REG_LSR);
 	}
-	/* Discard everything left in the Rx FIFO. */
-	while (lsr & LSR_RXRDY) {
-		(void)uart_getreg(bas, REG_DATA);
-		uart_barrier(bas);
-		lsr = uart_getreg(bas, REG_LSR);
-	}
+        /* Discard everything left in the Rx FIFO. */
+        /*
+         * First do a dummy read/discard anyway, in case the UART was lying to us.
+         * This problem was seen on board, when IIR said RBR, but LSR said no RXRDY
+         * Results in a stuck ipend loop.
+         */
+        (void)uart_getreg(bas, REG_DATA);
+        while (lsr & LSR_RXRDY) {
+                (void)uart_getreg(bas, REG_DATA);
+                uart_barrier(bas);
+                lsr = uart_getreg(bas, REG_LSR);
+        }
 	uart_unlock(sc->sc_hwmtx);
  	return (0);
 }
@@ -862,7 +889,14 @@
 		uart_setreg(bas, REG_DATA, sc->sc_txbuf[i]);
 		uart_barrier(bas);
 	}
-	sc->sc_txbusy = 1;
+
+	/* 
+	 * Broken txfifo case when TX idle interrupt gets lost.
+	 * Spin wait TX to happen and then send interrupt.
+	 */
+	ns8250_drain(bas, UART_DRAIN_TRANSMITTER);
 	uart_unlock(sc->sc_hwmtx);
+	uart_sched_softih(sc, SER_INT_TXIDLE);
+
 	return (0);
 }
